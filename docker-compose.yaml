version: "3"
services:
  frontend:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      dockerfile: ./frontend/Dockerfile
    ports:
      # Expose port 8080 on the host, and map port 80 of the container to port 8080 on the host
      # Access the application at http://localhost:8080
      - "8080:80"
    volumes:
      # Mount the frontend directory
      - ./frontend/src:/usr/share/nginx/html
    networks:
      - bookstore-net

  orchestrator:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the orchestrator directory
      dockerfile: ./orchestrator/Dockerfile
    ports:
      # Expose port 8081 on the host, and map port 5000 of the container to port 8081 on the host
      - 8081:5000
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the orchestrator directory to see how this is used
      - PYTHONFILE=/app/orchestrator/src/app.py
      - PYTHONPATH=/app/utils/pb
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the orchestrator/src directory in the current directory to the /app/orchestrator/src directory in the container
      - ./orchestrator/src:/app/orchestrator/src
    networks:
      - bookstore-net

  fraud_detection:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./fraud_detection/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50051:50051
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/fraud_detection/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./fraud_detection/src:/app/fraud_detection/src
    networks:
      - bookstore-net

  transaction_verification:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./transaction_verification/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50052:50052
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./transaction_verification/src:/app/transaction_verification/src
    networks:
      - bookstore-net

  suggestions:
    build:
      # Use the current directory as the build context
      # This allows us to access the files in the current directory inside the Dockerfile
      context: ./
      # Use the Dockerfile in the fraud_detection directorys
      dockerfile: ./suggestions/Dockerfile
    ports:
      # Expose port 50051 on the host, and map port 50051 of the container to port 50051 on the host
      - 50053:50053
    environment:
      # Pass the environment variables to the container
      # The PYTHONUNBUFFERED environment variable ensures that the output from the application is logged to the console
      - PYTHONUNBUFFERED=TRUE
      # The PYTHONFILE environment variable specifies the absolute entry point of the application
      # Check app.py in the fraud_detection directory to see how this is used
      - PYTHONFILE=/app/transaction_verification/src/app.py
    volumes:
      # Mount the utils directory in the current directory to the /app/utils directory in the container
      - ./utils:/app/utils
      # Mount the fraud_detection/src directory in the current directory to the /app/fraud_detection/src directory in the container
      - ./suggestions/src:/app/suggestions/src
    networks:
      - bookstore-net

  order_queue:  
    build:
      context: ./
      dockerfile: ./order_queue/Dockerfile
    container_name: order_queue
    ports:
      - "50054:50054"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/order_queue/src/app.py
    volumes:
      - ./utils:/app/utils
      - ./order_queue/src:/app/order_queue/src
    networks:
      - bookstore-net

  executor_1:
    build:
      context: ./
      dockerfile: ./executor/Dockerfile
    container_name: executor_1
    ports:
      - "50055:50055"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/executor/src/app.py
      - EXECUTOR_ID=1
      - PEER_IDS=1,2
      - DB_PRIMARY_HOST=books-db-primary:6000
    volumes:
      - ./utils:/app/utils
      - ./executor/src:/app/executor/src
      - ./payment_service:/app/payment_service
    networks:
      - bookstore-net


  executor_2:
    build:
      context: ./
      dockerfile: ./executor/Dockerfile
    container_name: executor_2
    ports:
      - "50057:50055"
    environment:
      - PYTHONUNBUFFERED=TRUE
      - PYTHONFILE=/app/executor/src/app.py
      - EXECUTOR_ID=2
      - PEER_IDS=1,2
      - DB_PRIMARY_HOST=books-db-primary:6000
    volumes:
      - ./utils:/app/utils
      - ./executor/src:/app/executor/src
      - ./payment_service:/app/payment_service
    networks:
      - bookstore-net

  books-db-primary:
    build: ./books_db
    environment:
      - ROLE=primary
      - PORT=6000
      - BACKUP_PEERS=books-db-b1:6000,books-db-b2:6000
    volumes:
      - ./utils:/app/utils  
    container_name: books-db-primary
    ports: ["6000:6000"]
    networks:
      - bookstore-net

  books-db-b1:
    build: ./books_db
    environment:
      - ROLE=backup
      - PORT=6000
    volumes:
      - ./utils:/app/utils  
    container_name: books-db-b1
    networks:
      - bookstore-net

  books-db-b2:
    build: ./books_db
    environment:
      - ROLE=backup
      - PORT=6000
    volumes:
      - ./utils:/app/utils   
    container_name: books-db-b2
    networks:
      - bookstore-net


  payment-service:
    build:
      context: ./payment_service
    ports:
      - "50056:50056"
    networks:
      - bookstore-net
    
networks: 
  bookstore-net: {}
